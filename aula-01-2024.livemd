# 01/10/2024

## Tipos Básicos

```elixir
  1340
```

```elixir
"Felipe Costa"
```

```elixir
3.36666666
```

```elixir
10 / 3
```

```elixir
:age
```

Tipos básicos:

* Números inteiros
* Strings
* Números de ponto flutuante
* Átomos

## Tipos complexos

```elixir
[]
```

```elixir
[1, 2, 3, 4, 5]
```

```elixir
["elixir", :atom, 1, 2, 2.5]
```

```elixir
{1, "José Valim"}
```

```elixir
{2.7, "teste", []}
```

```elixir
%{"Felipe" => 10, "Costa" => 5}
```

```elixir
Map.keys(%{"Felipe" => 10, "Costa" => 5})

```

```elixir
Map.values(%{"Felipe" => 10, "Costa" => 5})
```

## Operadores

```elixir
10/3
```

```elixir
10 - 3
```

```elixir
10 + 3 * 10
```

```elixir
10 + 11
```

```elixir
20 * 2
```

```elixir
"AFRICA " <> "DO " <> "SUL"
```

## Funções

```elixir
String.upcase("brasil")
```

```elixir
"BRASIL" == String.upcase("brasil")
```

```elixir
String.capitalize("brasil")
```

```elixir
String.at("Brasil", 2)
```

## Criar suas próprias funções

```elixir
defmodule Urna do
  def vota(nome_pessoa_candidata) do
    "Você votou em #{nome_pessoa_candidata}!"
  end

  def vota(numero, nome) do
    "Você votou em #{numero} - #{nome}!"
  end

  def vota(urna, numero, nome) do
    [{numero, nome} | urna] 
  end

  def resultado(urna) do
    urna
    |> Enum.map(fn {_numero, pessoa} -> pessoa end)
    |> Enum.frequencies()
    |> Map.to_list()
  end

  def mostra_vencedor(lista) do
    {nome_do_vencedor, votos} = Enum.max_by(lista, fn {_nome, votos} -> votos end)
    "A pessoa vencedora da eleição foi #{nome_do_vencedor} com #{votos} votos"
  end
end
```

```elixir
Urna.vota("José Valim")

Urna.vota("Joe Armstrong")
```

```elixir
Urna.vota(26, "Robert Virding")
```

```elixir
urna = []

urna = Urna.vota(urna, 1, "José Valim")
urna = Urna.vota(urna, 2, "Robert Virding")
urna = Urna.vota(urna, 2, "Robert Virding")
urna = Urna.vota(urna, 3, "Joe Armstrong")
urna = Urna.vota(urna, 1, "José Valim")
urna = Urna.vota(urna, 4, "Mike Williams")
```

```elixir
[]
 |> Urna.vota(1, "José Valim")
 |> Urna.vota(2, "Robert Virding")
 |> Urna.vota(2, "Robert Virding")
 |> Urna.vota(3, "Joe Armstrong")
 |> Urna.vota(1, "José Valim")
 |> Urna.vota(4, "Mike Williams")
```

```elixir
[]
 |> Urna.vota(1, "José Valim")
 |> Urna.vota(2, "Robert Virding")
 |> Urna.vota(2, "Robert Virding")
 |> Urna.vota(3, "Joe Armstrong")
 |> Urna.vota(1, "José Valim")
 |> Urna.vota(4, "Mike Williams")
 |> Urna.vota(1, "José Valim")
 |> dbg()
```

## Calculando quem ganhou (Depois que a eleição termina)

```elixir
[]
 |> Urna.vota(1, "José Valim")
 |> Urna.vota(2, "Robert Virding")
 |> Urna.vota(2, "Robert Virding")
 |> Urna.vota(3, "Joe Armstrong")
 |> Urna.vota(1, "José Valim")
 |> Urna.vota(4, "Mike Williams")
 |> Urna.vota(1, "José Valim")
 |> Urna.vota(1, "José Valim")
 |> Urna.resultado()
 |> Urna.mostra_vencedor()
 |> dbg()
```

## Funções do Módulo Enum

```elixir
defmodule Math do
  def double(x) do
    x * 2
  end
end

Enum.map([10, 4, 3], &Math.double/1)

Enum.map([10, 5, 7], fn x -> x * 2 end)

Enum.map([1, 2, 3], &(&1 * 2))
```

```elixir
  lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
```

```elixir
Enum.filter(lista, fn x -> rem(x, 2) == 0 end)
```

```elixir
lista 
|> Enum.filter(&(rem(&1, 2) == 0)) 
```

```elixir
Enum.map(lista, fn x -> x * x end)
```

```elixir
lista = [10, 20, 30, 40, 50]
```

```elixir
Enum.reduce(lista, 0, fn x, acc -> x + acc end)
```

```elixir
lista 
|> Enum.reduce(0, &(&1 + &2))
```

```elixir
lista = ["a", "b", "c", "d", "e"]
```

```elixir
Enum.count(lista)
```

```elixir
lista = [1, 3, 5, 7, 9]
```

```elixir
Enum.find(lista, fn x -> x > 5 end)
```

```elixir
lista
|> Enum.filter(fn x -> x > 5 end) 
|> Enum.map(fn x -> x end)  
```

```elixir
lista = [-1, 2, 3, 4, 5]
```

```elixir
Enum.any?(lista, fn x -> x < 0 end)
```

```elixir
tuplas = [{1, "a"}, {2, "b"}, {1, "c"}, {2, "d"}]
```

```elixir
Enum.group_by(tuplas, fn {key, _} -> key end)
```

```elixir
lista = [5, 3, 8, 1, 4]
```

```elixir
Enum.sort(lista)
```

```elixir
lista = [1, 2, 2, 3, 4, 4, 5]
```

```elixir
Enum.uniq(lista)
```

```elixir
lista = [[1, 2], [3, 4], [5, 6]]
```

```elixir
Enum.zip_with(lista, fn [x, y, z] -> x + y + z end)
```

```elixir
lista = [1, 2, 3, 4, 5, 6]
```

```elixir
Enum.chunk_every(lista, 2)
```

```elixir
lista = [1, 2, 3, 4, 5]
```

```elixir
Enum.sum(lista)
```

```elixir
lista = [1, 2, 3, 4]
```

```elixir
Enum.reduce(lista, 1, fn x, produto -> x * produto end)
```

```elixir
lista = [10, 20, 30, 40]
```

```elixir
defmodule CalcularMedia do
  def calcular_media(lista) do
    soma = Enum.sum(lista)
    contagem = Enum.count(lista)

    if contagem > 0 do
      soma / contagem
    else
      0
    end
  end
end
```

```elixir
media = CalcularMedia.calcular_media(lista)
IO.puts(media)
```

```elixir
lista  = [1, 2, 3, 4]
```

```elixir
Enum.all?(lista, fn x -> x > 0 end)
```

```elixir
lista1 = [1, 2, 3] 
lista2 = [4, 5, 6]
```

```elixir
Enum.concat(lista1, lista2)
```

```elixir
lista = ["a", "b", "c", "d"]
```

```elixir
Enum.each(lista, fn x -> IO.puts(x) end)
```

```elixir
lista = ["hello", "world"]
```

```elixir
  Enum.reduce(lista, "", fn elemento, conc -> 
    if conc == "" do
       elemento
    else
       conc <> " " <> elemento
    end
  end)
```

```elixir
lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
```

```elixir
Enum.filter(lista, fn x -> rem(x, 3) == 0 end)
```

```elixir
lista = [:apple, :banana, :apple, :orange, :banana, :banana]
```

```elixir
Enum.frequencies(lista)
```

```elixir
lista = ["apple", "banana", "cherry", "date", "fig"]
```

```elixir
Enum.filter(lista, fn x -> String.length(x) > 4 end)
```

```elixir
lista = [1, 2, 3, 4, 5]
```

```elixir
Enum.map(lista, fn x -> x * 2 end)
```

```elixir
lista = [7, 3, 1, 5, 9]
```

```elixir
Enum.min(lista)
```

```elixir
lista = [12, 4, 18, 7, 5]
```

```elixir
Enum.max(lista)
```

```elixir
lista = ["cat", "dog", "elephant", "tiger", "one"]
```

```elixir
Enum.count(lista, fn x -> 
  String.length(x) < 5
  end)
```

```elixir
lista = [2, 4, 6, 8, 10]
```

```elixir
Enum.any?(lista, fn x -> rem(x, 2) == 0 end)
```

```elixir
 lista = ["apple", "pear", "fig", "banana"]
```

```elixir
Enum.group_by(lista, fn x -> String.length(x) end)
```

```elixir
tuplas = [{1, "one"}, {2, "two"}, {3, "three"}]
```

```elixir
Enum.map(tuplas, fn x -> 
  x
    |> Tuple.to_list()
    |> Enum.join(" - ")
  end)
```

```elixir
lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
```

```elixir
lista 
   |> Enum.filter(fn x -> rem(x, 2) == 1 end)
   |> Enum.sum() 
```

```elixir
lista = ["Hello", "World", "From", "Elixir"]
```

```elixir
Enum.join(lista, " ")
```

```elixir
lista = [1, 2, 3, 1, 2, 4, 5]
```

```elixir
Enum.uniq(lista)
```

```elixir
lista = ["a", "b", "a", "c", "b", "a"]
```

```elixir
Enum.frequencies(lista)
```

```elixir
lista = ["apple", "banana", "kiwi", "grape"]
```

```elixir
Enum.filter(lista, fn word -> String.length(word) == 5 end)
```

## Structs

```elixir
map = %{a: 1, b: 2}
```

```elixir
map[:a]
```

```elixir
map2 = %{map | b: 5}
```

```elixir
map
```

```elixir
map2
```

Exemplo de Struct Pessoa.

```elixir
defmodule Pessoa do
  defstruct nome: "Henrique", idade: 25
end
```

```elixir
%Pessoa{}
```

```elixir
%Pessoa{nome: "João"}
```

```elixir
%Pessoa{peso: 100}
```

## Atribuindo uma Struct a uma variável

```elixir
joao = %Pessoa{nome: "João"}
```

## Acessando um campo de uma struct

```elixir
joao.nome
```

```elixir
joao.idade
```

## "Modificando" uma struct com |

```elixir
maria = %{joao | nome: "Maria"}
```

```elixir
maria = %{joao | peso: 45}
```

## Uso de Structs no casamento de padrões

```elixir
%Pessoa{nome: nome_do_maria} = maria
```

```elixir
nome_do_maria
```

## Structs são bare maps (mapas simples)

```elixir
is_map(joao)
```

## O campo especial __Struct__:

```elixir
joao.__struct__
```

```elixir
jane = Map.put(%Pessoa{}, :nome, "Jane")
```

```elixir
Map.merge(jane, %Pessoa{nome: "John"})
```

```elixir
Map.keys(jane)
```

## Valores padrões

```elixir
defmodule Produto do
  defstruct [:nome]
end
```

```elixir
%Produto{}
```

## Você pode combinar valores padrão explícito com valor 'nil' implícito

```elixir
defmodule Usuario do
  defstruct [:email, nome: "João", idade: 23]
end
```

```elixir
%Usuario{}
```

## Definindo chaves obrigatórias

```elixir
defmodule Car do
  @enforce_keys [:make]
  defstruct [:model, :make]
end
```

```elixir
%Car{}
```

```elixir
%Car{make: "toyota"}
```

```elixir
%Car{make: "toyota", model: "HILUX"}
```

## Construtores, Redutores e Conversores

```elixir
defmodule JogoDaVelha do
  defstruct [:tabuleiro, :jogadores, :jogador_da_vez, :vencedor]

  def new(jogador1, jogador2) do
    %__MODULE__{
      tabuleiro: ["", "", "", "", "", "", "", "", ""],
      jogadores: [jogador1, jogador2],
      jogador_da_vez: jogador1
    }
  end

  def joga(jogo, simbolo, x, y) do
    novo_tabuleiro = List.insert_at(jogo.tabuleiro, x - 1 + (y - 1) * 3, simbolo)
    [novo_jogador_da_vez] = jogo.jogadores -- [jogo.jogador_da_vez]
    %{jogo | tabuleiro: novo_tabuleiro, jogador_da_vez: novo_jogador_da_vez}
  end

  def jogador_da_vez(jogo) do
    jogo.jogador_da_vez
  end
  
end
```
