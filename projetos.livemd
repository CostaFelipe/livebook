# treinando structs

## Section

```elixir
defmodule People do
  defstruct first_name: nil,
            last_name: nil, 
            birthday: nil,
            location: "home"

  def full_name(%__MODULE__{} = person) do
    "#{person.first_name} #{person.last_name}"
  end

  def age(%__MODULE__{} = person) do
    days = Date.diff(Date.utc_today(), person.birthday)
    days / 365.25
  end

  def toggle_location(%__MODULE__{location: "away"} = person) do
    person |> set_location("home")
  end

  defp set_location(%__MODULE__{} = person, location) do
    %{person | location: location}
  end
  
end
```

```elixir
person = %People{first_name: "Bruce", last_name: "Wayne", birthday: ~D[2000-01-01], location: "away"}
```

```elixir
People.full_name(person)
```

```elixir
People.age(person)
```

```elixir
People.toggle_location(person)
```

```elixir
defmodule Todo do
  defstruct id: nil, title: "", completed: false
end
```

```elixir
defmodule TodoList do
  def start do
    []
  end

  def add_todo(todos, title) do
    id = Enum.count(todos) + 1
    new_todo = %Todo{id: id, title: title}
    [new_todo | todos]
  end

  def list_todos(todos) do
    Enum.each(todos, fn todo -> 
      IO.puts("ID: #{todo.id} - #{todo.title} [#{if todo.completed, do: "X", else: " "}]")
      end)
  end

  def completed_todo(todos, id) do
    Enum.map(todos, fn todo -> 
      if todo.id == id do
        %{todo | completed: true}
      else
        todo
      end
      end)
  end

  def remove_todo(todos, id) do
    Enum.reject(todos, fn todo -> todo.id == id end)
  end
end
```

```elixir
todos = TodoList.start()
```

```elixir
todos = TodoList.add_todo(todos, "Estudar elixir")
todos = TodoList.add_todo(todos, "Escrever artigo")
todos = TodoList.add_todo(todos, "Fazer exerc√≠cio")
```

```elixir
TodoList.list_todos(todos)
```

```elixir
todos = TodoList.completed_todo(todos, 1)
```

```elixir
TodoList.list_todos(todos)
```

```elixir
todos = TodoList.remove_todo(todos, 1)
```

```elixir
TodoList.list_todos(todos)
```
